"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveBuildResourceClassAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const eas_json_1 = require("@expo/eas-json");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const semver_1 = tslib_1.__importDefault(require("semver"));
const generated_1 = require("../../graphql/generated");
const log_1 = tslib_1.__importDefault(require("../../log"));
const metadata_1 = require("../metadata");
const iosResourceClassToBuildResourceClassMapping = {
    [eas_json_1.ResourceClass.DEFAULT]: generated_1.BuildResourceClass.IosDefault,
    [eas_json_1.ResourceClass.LARGE]: generated_1.BuildResourceClass.IosLarge,
    [eas_json_1.ResourceClass.M1_EXPERIMENTAL]: generated_1.BuildResourceClass.IosMMedium,
    [eas_json_1.ResourceClass.M1_MEDIUM]: generated_1.BuildResourceClass.IosMMedium,
    [eas_json_1.ResourceClass.M1_LARGE]: generated_1.BuildResourceClass.IosMLarge,
    [eas_json_1.ResourceClass.INTEL_MEDIUM]: generated_1.BuildResourceClass.IosIntelMedium,
    [eas_json_1.ResourceClass.MEDIUM]: generated_1.BuildResourceClass.IosMedium,
    [eas_json_1.ResourceClass.M_MEDIUM]: generated_1.BuildResourceClass.IosMMedium,
    [eas_json_1.ResourceClass.M_LARGE]: generated_1.BuildResourceClass.IosMLarge,
};
const androidResourceClassToBuildResourceClassMapping = {
    [eas_json_1.ResourceClass.DEFAULT]: generated_1.BuildResourceClass.AndroidDefault,
    [eas_json_1.ResourceClass.LARGE]: generated_1.BuildResourceClass.AndroidLarge,
    [eas_json_1.ResourceClass.MEDIUM]: generated_1.BuildResourceClass.AndroidMedium,
};
async function resolveBuildResourceClassAsync(profile, platform, projectDir, exp, resourceClassFlag) {
    const profileResourceClass = profile.resourceClass;
    if (profileResourceClass && resourceClassFlag && resourceClassFlag !== profileResourceClass) {
        log_1.default.warn(`Build profile specifies the "${profileResourceClass}" resource class but you passed "${resourceClassFlag}" to --resource-class.\nUsing the  "${resourceClassFlag}" as the override.`);
    }
    const selectedResourceClass = resourceClassFlag !== null && resourceClassFlag !== void 0 ? resourceClassFlag : profileResourceClass;
    return platform === eas_build_job_1.Platform.IOS
        ? await resolveIosResourceClassAsync(exp, projectDir, resourceClassFlag !== null && resourceClassFlag !== void 0 ? resourceClassFlag : profileResourceClass)
        : resolveAndroidResourceClass(selectedResourceClass);
}
exports.resolveBuildResourceClassAsync = resolveBuildResourceClassAsync;
function resolveAndroidResourceClass(selectedResourceClass) {
    if (selectedResourceClass &&
        [
            eas_json_1.ResourceClass.M1_EXPERIMENTAL,
            eas_json_1.ResourceClass.M1_MEDIUM,
            eas_json_1.ResourceClass.M1_LARGE,
            eas_json_1.ResourceClass.INTEL_MEDIUM,
        ].includes(selectedResourceClass)) {
        throw new Error(`Resource class ${selectedResourceClass} is only available for iOS builds`);
    }
    const resourceClass = selectedResourceClass !== null && selectedResourceClass !== void 0 ? selectedResourceClass : eas_json_1.ResourceClass.DEFAULT;
    return androidResourceClassToBuildResourceClassMapping[resourceClass];
}
async function resolveIosResourceClassAsync(exp, projectDir, selectedResourceClass) {
    const resourceClass = selectedResourceClass !== null && selectedResourceClass !== void 0 ? selectedResourceClass : (await resolveIosDefaultRequestedResourceClassAsync(exp, projectDir));
    if ([eas_json_1.ResourceClass.M1_EXPERIMENTAL, eas_json_1.ResourceClass.M1_MEDIUM].includes(resourceClass)) {
        log_1.default.warn(`Resource class ${chalk_1.default.bold(resourceClass)} is deprecated. Use ${chalk_1.default.bold('m-medium')} instead.`);
    }
    if (resourceClass === eas_json_1.ResourceClass.M1_LARGE) {
        log_1.default.warn(`Resource class ${chalk_1.default.bold('m1-large')} is deprecated. Use ${chalk_1.default.bold('m-large')} instead.`);
    }
    return iosResourceClassToBuildResourceClassMapping[resourceClass];
}
async function resolveIosDefaultRequestedResourceClassAsync(exp, projectDir) {
    const { sdkVersion } = exp;
    const reactNativeVersion = await (0, metadata_1.getReactNativeVersionAsync)(projectDir);
    if ((sdkVersion && semver_1.default.satisfies(sdkVersion, '>=48')) ||
        (reactNativeVersion && semver_1.default.satisfies(reactNativeVersion, '>=0.71.0'))) {
        return eas_json_1.ResourceClass.M_MEDIUM;
    }
    else {
        return eas_json_1.ResourceClass.DEFAULT;
    }
}
